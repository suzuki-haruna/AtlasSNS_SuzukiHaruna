ID61/ああ/abc@jp/aaaaaaaa
ID66/あい/abb@jp/aaaaaaaa

■単語
□added<アディド>addの過去形、または過去分詞。(…を)(他のものに)加える、追加する。
□authenticate<オーセンティケーション>認証する。
□CDN Content Delivery Network<>複数拠点に分散配置されたサーバーネットワークを利用して、よりユーザーに近い場所からコンテンツを迅速に配信するシステムです。 インターネット上でのコンテンツ配信の高速化により、Webサイトのパフォーマンスを向上させることを主な目的として活用します。
□global<グローバル>とは、全世界の、地球全体の、全体的な、広範囲の、などの意味を持つ英単語。ITの分野では、「系全体の」という意味で用いられることが多い。具体的な範囲は分野や対象により異なる。対義語は「ローカル」（local）あるいは「プライベート」（private）。
□hoge<ホゲ>特に意味がない、何を入れてもかまわない。
□web<>World Wide Web<ワールド ワイド ウェブ>

https://www.ritolab.com/

フォローフォロワー数login.blade.php内
@foreach($follows as $d)
<p>{{$d->following_id}}</p>
@endforeach

@foreach($posts as $post) <!-- @繰り返し処理 ($posts変数をforeach内でのみ使える$postに置き換える) -->
   <!-- ….. -->
    <div class="content">
        <!-- 投稿の編集ボタン -->
        <a class="js-modal-open" href="" post="{{ $post->post }}" post_id="{{ $post->id }}">編集</a>
    </div>
   <!-- …. -->
@endforeach

@foreach($posts as $post)
{{$post->id}}
{{$post->post}}
@endforeach

<table border="1" cellspacing="0">
@foreach($list as $list)
  <tr>
    <td>{{ $list->user_id }}</td>
    <td>{{ $list->post }}</td>
    <td>{{ $list->create_at }}</td>
  </tr>
@endforeach
</table>

<!--            @if (follows()->following_id()->follows($user->id))
  <form action="/users/{{ $user->id }}/unfollow" method="post">
    @csrf
    <input type="submit" name="button" class="followButton" value="フォロー解除">
  </form>
  @else
  <form action="/users/{{ $user->id }}/follow" method="post">
    @csrf
    <input type="submit" name="follow" class="followButton" value="フォローする">
  </form>
  @endif-->

  //フォローフォロワー
    /*public function follow(User $user){
    $follow = FollowUser::create([
            'following_id' => \Auth::user()->id, //認証ユーザー＝フォローユーザー
            'followed_id' => $user->id, //相手のIDを$user->idで取得できるようにしておく
        ]);
        $followCount = count(FollowUser::where('followed_id', $user->id)->get()); //フォローされているユーザーの数をcountして取得
        return response()->json(['followCount' => $followCount]);
    }

        public function unfollow(User $user) { //インスタンスを取得して削除する機能
        $follow = FollowUser::where('following_id', \Auth::user()->id)->where('followed_id', $user->id)->first();
        $follow->delete();
        $followCount = count(FollowUser::where('followed_id', $user->id)->get());

        return response()->json(['followCount' => $followCount]);
        }*/

        //フォローフォロワーfollophp
    /*protected $fillable = ['following_id', 'followed_id'];
    protected $table = 'follows'; //テーブル名を定義

    public function index(){
        return view('follows.followsList');
    }*/

FollowsControllerとUser.phpとsearch.bladeが主にいじっているところです。

①ユーザーごとに「フォローする」ボタンと「フォロー解除」ボタンを付ける。
②「フォローする」ボタンを押した場合はfollowsテーブルにレコードが追加され、「フォロー解除」ボタンを押した場合はそのレコードを削除する。
③フォローしているかどうか判断するメソッドを用意しusersテーブルとfollowsテーブルをリレーションする。
④上記メソッドを使用し、フォローしていなければフォローするボタンを、フォローしていればフォロー解除ボタンを表示するように条件を分ける。

まずは上記の①②を実装してみてください！！
②のレコードの追加はつぶやきの登録を参考に、レコードの削除はつぶやきの削除を参考にしてみてください！

③④は下記サイトを参考に進めてみてください！
https://qiita.com/namizatork/items/0c81b0a94a1084cda6de

//追加 フォロー
    public function users()
    {
        return $this->belongsToMany('App\User'); //userに属するuserを取得
    }

                    <!--@if(in_array($user->id,Auth::user()->follow_each()))-->

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Follow; //追加
use App\User;
use App\Post;
use Illuminate\Support\Facades\Auth; // Auth(認証)ファサードを読み込む
use Illuminate\Support\Facades\DB; //DB接続に必要なクラスをインポートする

class FollowsController extends Controller
{
    public function followList(){
        return view('follows.followList');
    }
    public function followerList(){
        return view('follows.followerList');
    }

    //追加 フォロー
    public function follow(User $user){
        $follower = Auth::User();
        $is_following = $follower->isFollowing($user->id); //フォローしているか
        if(!$is_following){
            $follower->follow($user->id); //フォローしていなければフォローする
        return back(); //直前のページにリダイレクト
        }
    }
    /*public function follow(Request $request){
        $data = [
            'user'=>'$user->id',
        ];
        return view('users.search');
    }*/
    /*public function create(Request $request) {
        $param = [
            'follow' => $request->$user->id, //取得したいデータをinput要素のname属性
        ];
        //DBに接続しデータを挿入する。第１パラメータにSQL文、第２に$paramを。
        DB::insert('insert into reviews (following_id, followed_id) values (:$user->id, :$user->id, NOW())', $param);
        return redirect('users.search');
    }*/

    //フォロー解除
    public function unfollow(User $user){
        $follower = auth()->user();
        $is_following = $follower->isFollowing($user->id); //フォローしているか
        if($is_following){
            $follower->unfollow($user->id); //フォローしていれば解除する
            return back(); //直前のページにリダイレクト
        }
    }
    }

①投稿編集、削除はログインしているユーザーだけ表示させる。
　bladeにif文で指定してみましょう。
　ログインしているユーザーにしかボタンが出ないように設定をする必要があります。

②表示させるツイートがフォローしてるユーザーだけになるようにif文で指定。
　こちらですが、コードを確認したら「フォローしていてもしていなくても全員のツイートを取得する」というコードになっています。
　コントローラーで全部のツイートを取得する形になっています。
　もしbladeに「フォローしている人だけを表示させる」というif文を設定していない場合、こちらもbladeにif文で指定してみましょう。
　(すでに設定されているようであれば飛ばしてもらって構いません！)

③投稿する際のバリデーションの設定。
　バリデーションをコントローラーに追記する必要があります。
　また、もしエラーだった場合はbladeにエラー内容が表示されるようにコードを追記するといいです！
