ID61/ああ/abc@jp/aaaaaaaa→00000000?
ID66/あい/abb@jp/aaaaaaaa→あいう/あいうえお/abb@jp/00000000/icon2
ID71/浜崎/ hamasaki@jp/hhhhhhhh
70/佐藤/satou@jp/00000000
✕68/あおあお
72/Gackt/gackt@jp/00000000
73/ねこ/neco@jp/00000000
74/悪魔/aku@jp/00000000
75/天使/ten@jp/00000000
76/ひそか/hiso@jp/11111111
77/クロロ/kuro@jp/00000000
78/おばけ/oba@jp/00000000
79/かめ/kame@jp/00000000
80/ぶた/boo@jp/00000000
yoho@jp/00000000
upa@jp/00000000

https://qiita.com/kawa_matsu/items/607ccb742235ea04bf0c

https://github.com/vytautashi/classifieds-board-in-laravel/issues/5
https://qiita.com/keiswe/items/5075099fe51bb8ff33e2
https://qiita.com/Hashimoto-Noriaki/items/b9c40f86c2a59728be0b
https://www.math-joy-life.com/laravel-sqlstatehy000-1049/#google_vignette
「ポート番号が正しくない」ポート番号の設定が合っているか確認。

◎投稿の編集にもバリデーションを付ける
現状、バリデーションがついてないので、空で編集ボタン押すとエラーはきます。
◎投稿時間の秒数を消す
現状、「2024-06-22 11:01:36」のように表示されていますが、
「2024-06-22 11:01」←このように秒数消してあげてください！（投稿が表示されている箇所すべて）
◎バリデーションのエラーメッセージは日本語に

----------

https://www.ritolab.com/

フォローフォロワー数login.blade.php内
@foreach($follows as $d)
<p>{{$d->following_id}}</p>
@endforeach

@foreach($posts as $post) <!-- @繰り返し処理 ($posts変数をforeach内でのみ使える$postに置き換える) -->
   <!-- ….. -->
    <div class="content">
        <!-- 投稿の編集ボタン -->
        <a class="js-modal-open" href="" post="{{ $post->post }}" post_id="{{ $post->id }}">編集</a>
    </div>
   <!-- …. -->
@endforeach

@foreach($posts as $post)
{{$post->id}}
{{$post->post}}
@endforeach

<table border="1" cellspacing="0">
@foreach($list as $list)
  <tr>
    <td>{{ $list->user_id }}</td>
    <td>{{ $list->post }}</td>
    <td>{{ $list->create_at }}</td>
  </tr>
@endforeach
</table>

<!--            @if (follows()->following_id()->follows($user->id))
  <form action="/users/{{ $user->id }}/unfollow" method="post">
    @csrf
    <input type="submit" name="button" class="followButton" value="フォロー解除">
  </form>
  @else
  <form action="/users/{{ $user->id }}/follow" method="post">
    @csrf
    <input type="submit" name="follow" class="followButton" value="フォローする">
  </form>
  @endif-->

  //フォローフォロワー
    /*public function follow(User $user){
    $follow = FollowUser::create([
            'following_id' => \Auth::user()->id, //認証ユーザー＝フォローユーザー
            'followed_id' => $user->id, //相手のIDを$user->idで取得できるようにしておく
        ]);
        $followCount = count(FollowUser::where('followed_id', $user->id)->get()); //フォローされているユーザーの数をcountして取得
        return response()->json(['followCount' => $followCount]);
    }

        public function unfollow(User $user) { //インスタンスを取得して削除する機能
        $follow = FollowUser::where('following_id', \Auth::user()->id)->where('followed_id', $user->id)->first();
        $follow->delete();
        $followCount = count(FollowUser::where('followed_id', $user->id)->get());

        return response()->json(['followCount' => $followCount]);
        }*/

        //フォローフォロワーfollophp
    /*protected $fillable = ['following_id', 'followed_id'];
    protected $table = 'follows'; //テーブル名を定義

    public function index(){
        return view('follows.followsList');
    }*/

FollowsControllerとUser.phpとsearch.bladeが主にいじっているところです。

①ユーザーごとに「フォローする」ボタンと「フォロー解除」ボタンを付ける。
②「フォローする」ボタンを押した場合はfollowsテーブルにレコードが追加され、「フォロー解除」ボタンを押した場合はそのレコードを削除する。
③フォローしているかどうか判断するメソッドを用意しusersテーブルとfollowsテーブルをリレーションする。
④上記メソッドを使用し、フォローしていなければフォローするボタンを、フォローしていればフォロー解除ボタンを表示するように条件を分ける。

まずは上記の①②を実装してみてください！！
②のレコードの追加はつぶやきの登録を参考に、レコードの削除はつぶやきの削除を参考にしてみてください！

③④は下記サイトを参考に進めてみてください！
https://qiita.com/namizatork/items/0c81b0a94a1084cda6de

//追加 フォロー
    public function users()
    {
        return $this->belongsToMany('App\User'); //userに属するuserを取得
    }

                    <!--@if(in_array($user->id,Auth::user()->follow_each()))-->

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Follow; //追加
use App\User;
use App\Post;
use Illuminate\Support\Facades\Auth; // Auth(認証)ファサードを読み込む
use Illuminate\Support\Facades\DB; //DB接続に必要なクラスをインポートする

class FollowsController extends Controller
{
    public function followList(){
        return view('follows.followList');
    }
    public function followerList(){
        return view('follows.followerList');
    }

    //追加 フォロー
    public function follow(User $user){
        $follower = Auth::User();
        $is_following = $follower->isFollowing($user->id); //フォローしているか
        if(!$is_following){
            $follower->follow($user->id); //フォローしていなければフォローする
        return back(); //直前のページにリダイレクト
        }
    }
    /*public function follow(Request $request){
        $data = [
            'user'=>'$user->id',
        ];
        return view('users.search');
    }*/
    /*public function create(Request $request) {
        $param = [
            'follow' => $request->$user->id, //取得したいデータをinput要素のname属性
        ];
        //DBに接続しデータを挿入する。第１パラメータにSQL文、第２に$paramを。
        DB::insert('insert into reviews (following_id, followed_id) values (:$user->id, :$user->id, NOW())', $param);
        return redirect('users.search');
    }*/

    //フォロー解除
    public function unfollow(User $user){
        $follower = auth()->user();
        $is_following = $follower->isFollowing($user->id); //フォローしているか
        if($is_following){
            $follower->unfollow($user->id); //フォローしていれば解除する
            return back(); //直前のページにリダイレクト
        }
    }
    }

①投稿編集、削除はログインしているユーザーだけ表示させる。
　bladeにif文で指定してみましょう。
　ログインしているユーザーにしかボタンが出ないように設定をする必要があります。

②表示させるツイートがフォローしてるユーザーだけになるようにif文で指定。
　こちらですが、コードを確認したら「フォローしていてもしていなくても全員のツイートを取得する」というコードになっています。
　コントローラーで全部のツイートを取得する形になっています。
　もしbladeに「フォローしている人だけを表示させる」というif文を設定していない場合、こちらもbladeにif文で指定してみましょう。
　(すでに設定されているようであれば飛ばしてもらって構いません！)

③投稿する際のバリデーションの設定。
　バリデーションをコントローラーに追記する必要があります。
　また、もしエラーだった場合はbladeにエラー内容が表示されるようにコードを追記するといいです！

<?php $user = Auth::user(); ?>
<p>テスト：{{ $user->mail }}</p>
<!--($is_following)--><!--($post->isFollowing($user->id))--><!--($user)-->
<!--(Auth::user()->isFollowing($user->id))-->

<!--<form action="{{ route('delete', ['user' => $user->id]) }}" method="POST">-->
{{ csrf_field() }}
{{ method_field('DELETE') }}

■考え方
①フォローリストページを画面表示する処理の中に、usersテーブルからユーザー情報を取得する処理を追加する。
②usersテーブルから取得したデータをフォローリストページで表示できるようにreturnの戻り値の中に含める。
③フォローリスト画面で、usersテーブルのデータからユーザーアイコンのカラムのデータを画面に表示する。

■考え方の詳細
①-１：FollowsControllerに最初から書かれていた、FollowListメソッド(フォローリストを画面表示させる処理)にusersテーブルからユーザーの情報を取得する処理を追加する。
　　　→まずは全員分の情報を取得する記述を書いてみる。
①-２：取得したデータは全員分のデータなので、自分がフォローした人だけのデータになるように絞り込む。
　　　→フォローとは、followsテーブルの中にある、following_idにフォローしている人のid、followed_idにフォローされている人のidが入っているレコードを使って表す。
　　　→つまり、自分が相手をフォローしているとは、following_idに自分のid、followed_idに相手のidが入っているレコードがある状態である。
　　　→自分がフォローしている相手のidをリレーションを使って取得し、そのidをwhereで条件指定してusersテーブルからデータを取得すれば絞り込みできる。

■他ユーザのアイコンをどこから呼び込むか
・上記考え方のように、usersテーブルからフォローしている人だけに情報を絞ってコントローラーで取得します。

"他ユーザーのプロフィールページ"としてのbladeファイル を作成していただく必要があります。

<!--<img src="{{ asset('storage/'.$followed_id->images) }}">-->

フォロワー 60ああ/61ああ,はろー/69鈴木オーマイガー！

【※】

【？】
緑川塾
■カメラオフOK!?
□16:00〜20:00→4時間(その中から数十分)
