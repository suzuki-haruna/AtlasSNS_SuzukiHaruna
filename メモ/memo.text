ID61/ああ/abc@jp/aaaaaaaa
ID66/あい/abb@jp/aaaaaaaa

■アクセス修飾子
□public：どこからでもアクセス可能です。アクセス修飾子がない場合は、publicを指定したものと同じになります。
□protected：そのクラス自身と継承クラスからアクセス可能です。つまり非公開ですが、継承は可能となります。
□private：同じクラスの中でのみアクセス可能です。非公開で継承クラスからもアクセス不可能となります。

■記号
□{{ }} 二重波括弧：PHPのecho(値を表示する関数)と同じ働きをする。{{}}を使うとその値をエスケープして出力することができる。セキュリティ対策(XSS)。

■単語
□added<アディド>addの過去形、または過去分詞。(…を)(他のものに)加える、追加する。
□authenticate<オーセンティケーション>認証する。
□CDN Content Delivery Network<>複数拠点に分散配置されたサーバーネットワークを利用して、よりユーザーに近い場所からコンテンツを迅速に配信するシステムです。 インターネット上でのコンテンツ配信の高速化により、Webサイトのパフォーマンスを向上させることを主な目的として活用します。
□global<グローバル>とは、全世界の、地球全体の、全体的な、広範囲の、などの意味を持つ英単語。ITの分野では、「系全体の」という意味で用いられることが多い。具体的な範囲は分野や対象により異なる。対義語は「ローカル」（local）あるいは「プライベート」（private）。
□hoge<ホゲ>特に意味がない、何を入れてもかまわない。
□web<>World Wide Web<ワールド ワイド ウェブ>

https://www.ritolab.com/

フォローフォロワー数login.blade.php内
@foreach($follows as $d)
<p>{{$d->following_id}}</p>
@endforeach

@foreach($posts as $post) <!-- @繰り返し処理 ($posts変数をforeach内でのみ使える$postに置き換える) -->
   <!-- ….. -->
    <div class="content">
        <!-- 投稿の編集ボタン -->
        <a class="js-modal-open" href="" post="{{ $post->post }}" post_id="{{ $post->id }}">編集</a>
    </div>
   <!-- …. -->
@endforeach

@foreach($posts as $post)
{{$post->id}}
{{$post->post}}
@endforeach

<table border="1" cellspacing="0">
@foreach($list as $list)
  <tr>
    <td>{{ $list->user_id }}</td>
    <td>{{ $list->post }}</td>
    <td>{{ $list->create_at }}</td>
  </tr>
@endforeach
</table>

<!--            @if (follows()->following_id()->follows($user->id))
  <form action="/users/{{ $user->id }}/unfollow" method="post">
    @csrf
    <input type="submit" name="button" class="followButton" value="フォロー解除">
  </form>
  @else
  <form action="/users/{{ $user->id }}/follow" method="post">
    @csrf
    <input type="submit" name="follow" class="followButton" value="フォローする">
  </form>
  @endif-->

  //フォローフォロワー
    /*public function follow(User $user){
    $follow = FollowUser::create([
            'following_id' => \Auth::user()->id, //認証ユーザー＝フォローユーザー
            'followed_id' => $user->id, //相手のIDを$user->idで取得できるようにしておく
        ]);
        $followCount = count(FollowUser::where('followed_id', $user->id)->get()); //フォローされているユーザーの数をcountして取得
        return response()->json(['followCount' => $followCount]);
    }

        public function unfollow(User $user) { //インスタンスを取得して削除する機能
        $follow = FollowUser::where('following_id', \Auth::user()->id)->where('followed_id', $user->id)->first();
        $follow->delete();
        $followCount = count(FollowUser::where('followed_id', $user->id)->get());

        return response()->json(['followCount' => $followCount]);
        }*/

        //フォローフォロワーfollophp
    /*protected $fillable = ['following_id', 'followed_id'];
    protected $table = 'follows'; //テーブル名を定義

    public function index(){
        return view('follows.followsList');
    }*/
